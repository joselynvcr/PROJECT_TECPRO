package saborea.model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;

import javax.swing.JOptionPane;

import saborea.model.entities.Detalle_Pedido;
import saborea.model.entities.Empleado;
import saborea.model.entities.Pedido;
import saborea.model.entities.Producto;
import saborea.model.entities.login;

public class Detalle_PedidoDAO implements IDAO {
	/*private int IdDetalle_Pedido;
	private int CodPedido;
	private Pedido ObjPedido;	
	private int CantidadProductos;
	private int CodProducto;
	private Producto Objproducto;
	private double precio;
	private double total;*/
	private Connection con=null;		
	private ArrayList<Detalle_Pedido> lista=new ArrayList<>();
	private Detalle_Pedido ObjDetallePedido=null;
	PreparedStatement ps;
	 public Detalle_PedidoDAO() {
		//vamos a conectar a la base de datos
		con= new ConnectionSaborea().getConnection();		
		
	}
	
	@Override
	public ArrayList<Detalle_Pedido> listar(boolean join) {		
		
		try {
			//vamos a definir una sentencia SQL , sentencia SQL
			String SSQL= "SELECT * FROM detalle_pedido dp join pedido p "
					+ "on p.pedido_Id=dp.pedido_Id"
					+ "join producto pro"
					+ "on pro.producto_Id=dp.producto_Id";		
			//Va a preparar nuestra sentencia SSQL segura para su ejecución 
			ps=con.prepareStatement(SSQL);
			//dentro de rs ya tengo todos los registros de mi tabla, necesito recorrer para cargar dentro de un objeto y posteriormente cargar cada objeto dentro de una lista
			//y por ultimo enviar un arraylist de todos los registros de la tabla 
			//ResulSet=conjunto de resultados, contiene los resultados de una consulta SQL
			ResultSet rs= ps.executeQuery();
			//mientras haya un registro todavia en resultset
			while(rs.next()){
				
				//FALSE
				if (!join){					
					ObjDetallePedido=new Detalle_Pedido( 											
							rs.getInt("detalle_pedido_id"),
							rs.getInt("pedido_Id"), 
							null,
							rs.getInt("cant_Productos"), 
							rs.getInt("producto_Id"),
							null,
							rs.getDouble("precio"),
							rs.getDouble("Total")
					);
				}
				else {
					//TRUE
					ObjDetallePedido=new Detalle_Pedido( 											
							rs.getInt("detalle_pedido_id"),
							rs.getInt("pedido_Id"), 
							new Pedido(
									rs.getInt("pedido_Id"),
									rs.getInt("mempleado_Id"),
									null,
									rs.getInt("cempleado_Id"),
									null,
									rs.getTimestamp("FechaHora"),
									rs.getDouble("TotalPagar"),
									rs.getInt("cliente_Id"),
									null,
									rs.getInt("mesa_Id"),
									null,
									rs.getBoolean("pagado")
									),									
							rs.getInt("cant_Productos"), 
							rs.getInt("producto_Id"),
							new Producto(
									rs.getInt("producto_Id"),					
									rs.getString("nom_Producto"),
									rs.getDouble("precio_Producto"),
									rs.getInt("stock_Producto"),
									rs.getString("descr_Producto")
									),
							rs.getDouble("precio"),
							rs.getDouble("Total")
					);
				//necesito agregar este objeto a mi lista
				lista.add(ObjDetallePedido);				
				}
		}	
			return lista;
			
		} catch (SQLException e) {
			//si hay un error en SSQL o en la conexiòn nos darà aviso
			JOptionPane.showMessageDialog(null,e.getMessage());
			//e.printStackTrace();			
		}		
		return null;
	}

	@Override
	public void insertar(Object obj) {
		try {
			ObjDetallePedido= (Detalle_Pedido) obj; 
			
			String SSQL="INSERT INTO detalle_pedido "
					+ "(detalle_pedido_id,pedido_Id,producto_Id,cant_Productos,Total,precio) "
					+ "VALUES (?, ?, ?, ?, ?, ?)";
			ps=con.prepareStatement(SSQL);
			
			ps.setInt(1, ObjDetallePedido.getIdDetalle_Pedido());
			ps.setInt(2, ObjDetallePedido.getCodPedido());
			ps.setDouble(3, ObjDetallePedido.getCodProducto());
			ps.setInt(4, ObjDetallePedido.getCantidadProductos());
			ps.setDouble(5, ObjDetallePedido.getTotal());
			ps.setDouble(6, ObjDetallePedido.getPrecio());
			//actualizaciòn de datos de las tablas ,devuelve el número de filas afectadas por la instrucción
			ps.executeUpdate();
		} catch (SQLException e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}		
		
		
	}

	@Override
	public void modificar(Object obj) {		
		
	}

	@Override
	public void eliminar(int cod) {
		try {			
			//(? ? ?) EN VEZ DE DIGITAR CADA CAMPO, VAMOS A PONER (?) POR CADA UNO DE LOS CAMPOS QUE NECESITEMOS, PARA QUE EL PREPARESTAMENT REALICE UNA INSERCCION SEGURA
			String SSQL="DELETE FROM detalle_pedido WHERE detalle_pedido_id=? ";
			ps=con.prepareStatement(SSQL);
			ps.setInt(1, cod);
			//actualizaciòn de datos de las tablas ,devuelve el número de filas afectadas por la instrucción
			ps.executeUpdate();
		} catch (SQLException e) {
			//de esta manera vamos a mapear nuestro error, por si ocurre
			JOptionPane.showMessageDialog(null, e.getMessage());
		}		
		
	}

	@Override
	public ArrayList buscar(Object objFind, boolean join) {
		
		
		return null;
	}

	
	
	
	
	
	
	
}
